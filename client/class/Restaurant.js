/**
 * Class Restaurant - Contains restaurants related methods.
 */
class Restaurant {
    /**
     * This method returns the restaurants' status as they are in 10bis' servers.
     * 
     * @returns {Promise<object>}
     */
    static async getRestaurantsStatusFrom10bis() {
        const currentActiveAddress = Office.getCurrentActiveAddress();

        if (Helper.isEmpty(currentActiveAddress)) {
            throw new Error("There is no active address.");
        }

        const office = await Office.getInstance();
        const requestPath = "https://www.10bis.co.il/NextApi/SearchRestaurants";
        const requestData = {
            "userToken": User.getInstance().userToken,
            "shoppingCartGuid": Restaurant.getShoppingCartGuid(),
            "culture": "he-IL",
            "uiCulture": "he",
            "isMobileDevice": false,
            "addressId": currentActiveAddress["addressId"],
            "cityId": currentActiveAddress["cityId"],
            "cityName": currentActiveAddress["cityName"],
            "streetId": currentActiveAddress["streetId"],
            "streetName": currentActiveAddress["streetName"],
            "houseNumber": currentActiveAddress["houseNumber"],
            "floor": currentActiveAddress["floor"],
            "longitude": currentActiveAddress["longitude"],
            "latitude": currentActiveAddress["latitude"],
            "phone01": currentActiveAddress["phone01"],
            "phone02": currentActiveAddress["phone02"],
            "isCompanyAddress": true,
            "addressCompanyId": office.addressCompanyId,
            "addressKey": office.addressKey,
            "deliveryMethod": "Delivery"
        };

        return await Request.send10bisRequest(requestPath, requestData, "GET");
    }

    /**
     * This method receives a restaurantId and returns the restaurant's page url for the given restaurant.
     * 
     * @param {Integer} restaurantId 
     * @returns {string}
     */
    static getRestaurantUrl(restaurantId) {
        return "https://www.10bis.co.il/next/Restaurants/Menu/Delivery/" + restaurantId;
    }

    /**
     * This method receives a restaurant's page url, extracts the restaurantId from the url and returns it.
     * 
     * @param {string} restaurantUrl 
     * @returns {Integer}
     */
    static getRestaurantIdFromRestaurantUrl(restaurantUrl) {
        restaurantUrl = restaurantUrl.replace("https", "");
        restaurantUrl = restaurantUrl.replace("http", "");
        restaurantUrl = restaurantUrl.replace("://", "");
        restaurantUrl = restaurantUrl.replace("10bis.co.il", "");
        restaurantUrl = restaurantUrl.replace("www.", "");
        restaurantUrl = restaurantUrl.replace("/next/Restaurants/Menu/Delivery/", "");
        
        const restaurantUrlSplitted = restaurantUrl.split("/");

        return parseInt(restaurantUrlSplitted[0]);
    }

    /**
     * This method returns the shoppingCartGuid that was generated by 10bis.
     * The shoppingCartGuid is an identifier for the shopping cart.
     * 
     * @returns {string|null}
     */
    static getShoppingCartGuid() {
        if (typeof __NEXT_DATA__ === "undefined") {
            return null;
        }

        return __NEXT_DATA__["props"]["initialProps"]["initialState"]["shoppingCart"]["shoppingCartGuid"];
    }

    /**
     * This method returns the restaurant object that can be found in 10bis' __NEXT_DATA__.
     * 
     * @param {Integer} restaurantId 
     * @returns {object|null}
     */
    static getRestaurantObject(restaurantId) {
        if (typeof __NEXT_DATA__ === "undefined") {
            return null;
        }

        if (typeof __NEXT_DATA__["props"]["initialProps"]["initialState"]["restaurants"] === "undefined") {
            return null;
        }

        if (typeof __NEXT_DATA__["props"]["initialProps"]["initialState"]["restaurants"]["data"] === "undefined") {
            return null;
        }

        if (typeof __NEXT_DATA__["props"]["initialProps"]["initialState"]["restaurants"]["data"]["restaurantsList"] === "undefined") {
            return null;
        }

        const restaurants = __NEXT_DATA__["props"]["initialProps"]["initialState"]["restaurants"]["data"]["restaurantsList"];

        for (let i = 0; i < restaurants.length; i++) {
            if (restaurants[i]["restaurantId"] == restaurantId) {
                return restaurants[i];
            }
        }

        return null;
    }

    /**
     * This method receives minimumPriceForOrder, pooledOrderSum and groupOrderSum and returns how much money is left
     * to pass the minimumPriceForOrder.
     * The method returns 0 if it passes the minimum.
     * 
     * @param {Number} minimumPriceForOrder 
     * @param {Number} pooledOrderSum 
     * @param {Number} groupOrderSum 
     * @returns {Float}
     */
    static calculateLeftAmountToPassMinimum(minimumPriceForOrder, pooledOrderSum, groupOrderSum) {
        const leftAmount = Math.max(0, minimumPriceForOrder - groupOrderSum - pooledOrderSum);
        const digitsAmountBeforeTheDot = parseInt(leftAmount).toString().length;
        let precision = digitsAmountBeforeTheDot + 2;

        if (leftAmount <= 0.001) {
            precision = 1;
        }

        return parseFloat(leftAmount.toPrecision(precision));
    }

    /**
     * This method receives minimumPriceForOrder, pooledOrderSum and groupOrderSum and returns whether the groupOrder
     * has passed the minimumPriceForOrder or not.
     * 
     * @param {Number} minimumPriceForOrder 
     * @param {Number} pooledOrderSum 
     * @param {Number} groupOrderSum 
     * @returns {Boolean}
     */
    static isPassMinimum(minimumPriceForOrder, pooledOrderSum, groupOrderSum) {
        return Restaurant.calculateLeftAmountToPassMinimum(minimumPriceForOrder, pooledOrderSum, groupOrderSum) == 0;
    }

    /**
     * This method sends an order request (restaurant/getUserOrder or restaurant/userOrderExists) according to the given path.
     * 
     * @param {string} path 
     * @param {Integer} restaurantId 
     * @returns {Promise<object>}
     */
    static async sendGroupeatRestaurantOrderRequest(path, restaurantId) {   
        if (Helper.isEmpty(restaurantId) || Helper.isEmpty(path)) {
            return false;
        }

        const requestData = await Request.getBasicRequestDataObject();

        requestData["restaurantId"] = restaurantId;

        const result = await Request.sendGroupeatRequest(path, requestData);

        // Checking what we should return from the response.
        if (path == "restaurant/getUserOrder") {
            return result["order"];
        }
        else {
            return result["result"];
        }
    }

    /**
     * This method receives a restaurantId and returns the order the user has for the given restaurant from 10bis.
     * 
     * @param {Integer} restaurantId 
     * @returns {object}
     */
    static getRestaurantOrderFromGroupeat(restaurantId) {
        return Restaurant.sendGroupeatRestaurantOrderRequest("restaurant/getUserOrder", restaurantId);
    }

    /**
     * This method receives a restaurantId and returns whether the user has an order for the given restaurant from 10bis or not.
     * 
     * @param {Integer} restaurantId 
     * @returns {object}
     */
    static isOrderExistsInGroupeat(restaurantId) {
        return Restaurant.sendGroupeatRestaurantOrderRequest("restaurant/userOrderExists", restaurantId);
    }

    /**
     * This method sets the restaurant that we're ordering from in 10bis.
     * This is required for the automatic payment to work and for setting the shopping cart's content.
     * 
     * @param {restaurantId} restaurantId 
     * @param {string} shoppingCartGuid 
     * @returns {Promise<object>}
     */
    static async setRestaurantInOrderIn10bis(restaurantId, shoppingCartGuid) {
        const userToken = User.getInstance().userToken;

        if (!shoppingCartGuid) {
            shoppingCartGuid = Restaurant.getShoppingCartGuid();
        }

        const requestData = {
            "Culture": "he-IL",
            "IsMobileDevice": false,
            "RestaurantId": restaurantId,
            "ShoppingCartGuid": shoppingCartGuid,
            "UiCulture": "he",
            "UserToken": userToken
        };

        return await Request.send10bisRequest("https://www.10bis.co.il/NextApi/SetRestaurantInOrder", requestData, "POST");
    }

    /**
     * This method receives an order and preprocesses the order so it can be sent to 10bis.
     * This is required for setting the shopping cart's content.
     * 
     * @param {object} order 
     */
    static preProcessExistingOrder(order) {
        for (let i = 0; i < order.length; i++) {
            const item = order[i];
            const newItem = {};
    
            newItem["AssignedUserId"] = item["assignedUserId"];
            newItem["Choices"] = item["choices"];
            newItem["DishId"] = item["dishId"];
            newItem["Quantity"] = item["quantity"];
            newItem["ShoppingCartDishId"] = i + 1;
    
            order[i] = newItem;
        }
    }

    /**
     * This method receives a restaurantId and a shoppingCartGuid and sets the current order in Groupeat in 10bis'
     * shopping cart.
     * This is needed because 10bis deletes the shopping cart when visiting a new restaurant.
     * 
     * @param {Integer} restaurantId 
     * @param {string} shoppingCartGuid 
     * @returns {Promise<object>}
     */
    static async setExistingOrderInShoppingCart(restaurantId, shoppingCartGuid) {
        if (!shoppingCartGuid) {
            shoppingCartGuid = Restaurant.getShoppingCartGuid();
        }

        await Restaurant.setRestaurantInOrderIn10bis(restaurantId, shoppingCartGuid);

        const existingOrder = await Restaurant.getRestaurantOrderFromGroupeat(restaurantId);
        const userToken = User.getInstance().userToken;

        if (Helper.isEmpty(existingOrder) || Helper.isEmpty(existingOrder["order"])) {
            return;
        }
    
        Restaurant.preProcessExistingOrder(existingOrder["order"]);
    
        const requestData = {
            "Culture": "he-IL",
            "DishList": existingOrder["order"],
            "ShoppingCartGuid": shoppingCartGuid,
            "UiCulture": "he",
            "UserToken": userToken
        };
    
        await Request.send10bisRequest("https://www.10bis.co.il/NextApi/SetDishListInShoppingCart", requestData, "POST");
    }

    /**
     * This method receives a restaurantId and returns the data we have about the restaurant in Groupeat's server.
     * 
     * @param {Integer} restaurantId
     * @returns {Promise<object>} 
     */
    static async getRestaurantDetailsFromGroupeat(restaurantId) {
        const requestData = await Request.getBasicRequestDataObject();

        requestData["restaurantId"] = restaurantId;

        const result = await Request.sendGroupeatRequest("restaurant/getRestaurantDetails", requestData);
        
        return result["result"];
    }
}
